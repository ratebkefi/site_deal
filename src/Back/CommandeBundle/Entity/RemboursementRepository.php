<?php

namespace Back\CommandeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RemboursementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RemboursementRepository extends EntityRepository
{

    public function getCountBigfid($idDeal,$idRef)
    {

        $sql = "select count(remb) ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as remb,";
        $from .= " Back\CommandeBundle\Entity\Ticket as tick,";
        $from .= "Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where remb.ticket = tick.id and";
        $where .= " tick.commande = cmd.id and";
        $where .= " cmd.reference = " . $idRef;
        $where .= " and cmd.deal = " . $idDeal;
        $where .= " and remb.historique > 0 ";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult()[0];
    }

    public function getCountCoup($idRef)
    {
        $sql = "select count(coupon) ";
        $from = " from  Back\CommandeBundle\Entity\Coupon as coupon ,";
        $from .= " Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where coupon.command=cmd.id";
        $where .= " and coupon.vendu in(2,3)";
        $where .= " and cmd.reference = " . $idRef;
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult()[0];
    }

    public function getCountVirement($idDeal,$idRef)
    {

        $sql = "select count(remb) ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as remb,";
        $from .= " Back\CommandeBundle\Entity\Ticket as tick,";
        $from .= "Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "Back\DealBundle\Entity\Deal as deal,";
        $where = " where remb.ticket = tick.id and";
        $where .= " tick.commande = cmd.id and";
        $where .= " cmd.reference = " . $idRef;
        $where .= " and cmd.deal = deal.id and";
        $where .= " deal.id = " . $idDeal;
        $where .= " and remb.virement > 0 ";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult()[0];



    }

    public function getRefPrice($idDeal)
    {

        $sql = "select ref.id , ref.title , ref.bigdealPrice";
        $from = " from Back\ContractBundle\Entity\Reference as ref,";
        $from .= " Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "Back\PlanningBundle\Entity\Planning as pla,";
        $from .= "Back\DealBundle\Entity\Deal as deal,";
        $where = " where ref.annexe = ann.id and";
        $where .= " pla.id = ann.planning and";
        $where .= " deal.id = " . $idDeal;
        $where .= " and deal.planning = pla.id";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

    public function findCouponARembourser($idCommande)
    {
        $sql = "select cp ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as rm,";
        $from .= "Back\CommandeBundle\Entity\Coupon as cp ";
        $where = " WHERE rm.coupon=cp.id and ";
        $where .= " cp.command=" . $idCommande . " and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " order by rm.dcr DESC
          ";
        $qb = $this->getEntityManager()->createQuery($query);
        // echo $qb->getSQL(); exit;
        return $qb->getResult();
    }
    public function getListCouponArembourser($data)
    {
        $sql = "select rm ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as rm,";
        $where = " where 1=1 and";

        //Filter code coupon
        if (isset($data['coupon'])) {
            $from .= "Back\CommandeBundle\Entity\Coupon as cp ";
            $where .= " rm.coupon=cp.id and ";
            if (isset($data['commande'])) {
                $from .= ", ";

            }
            $where .= " cp.code   =" . $data['coupon'] . " and ";
        }
        //Filter
        if (isset($data['remboursement'])) {
            if($data['remboursement']==1)
            {
                $where .= " rm.historique is not null and ";
            }
            if($data['remboursement']==2)
            {
                $where .= " rm.virement is not null and ";
            }
            if($data['remboursement']==3)
            {
                $where .= " rm.historique is not null and ";
                $where .= " rm.virement is not null and ";
            }
        }
        //Filter client
        if (isset($data['commande'])) {
            if(!isset($data['coupon']))
            {
                $from .= "Back\CommandeBundle\Entity\Coupon as cp, ";
                $where .= " rm.coupon=cp.id and ";
            }
            $from .= "Back\CommandeBundle\Entity\Command as cmd ";
            $where .= " cp.command=cmd.id and ";
            if (isset($data['pnamec'])) {
                $from .= ", ";

            }
            $where .= " cmd.id   =" . $data['commande'] . " and ";
        }
        if (isset($data['pnamec'])) {
            if(!isset($data['commande']))
            {
                $from .= "Back\CommandeBundle\Entity\Coupon as cp, ";
                $where .= " rm.coupon=cp.id and ";
                $from .= "Back\CommandeBundle\Entity\Command as cmd, ";
                $where .= " cp.command=cmd.id and ";
            }

            $from .= "Back\CommandeBundle\Entity\Client as cli ";
            $where .= " cmd.client=cli.id and ";
			$filter = explode(" " ,$data['pnamec']);
			$name 	= $filter[0];
			if(isset($filter[1]))
				$fname 	= $filter[1];
			else
				$fname 	= "";

            $where .= " cli.name   LIKE '%" . $fname . "%' and ";
            $where .= " cli.fname   LIKE '%" . $name . "%' and ";
        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " order by rm.dcr DESC
          ";
//echo $query; exit;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL(); exit;
        return $qb->getResult();
    }

    public function findTicketARemboursement()
    {
        $sql = "select tick ";
        $from = " from Back\CommandeBundle\Entity\Ticket as tick,";
        $from .= "Back\CommandeBundle\Entity\Command as cmd, ";
        $from .= "Back\CommandeBundle\Entity\Coupon as cp ";
        $where = " WHERE tick.commande = cmd.id and ";
        $where .= " cp.command = cmd.id and ";
        $where .= " cp.vendu   = 4 and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " order by tick.id DESC";
        $qb = $this->getEntityManager()->createQuery($query);
      //   echo $qb->getSQL(); exit;
        return $qb->getResult();
    }
}
