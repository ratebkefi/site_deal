<?php

namespace Back\CommandeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Back\DashBundle\Common\Tools;

/**
 * CommandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TichetRepository extends EntityRepository
{
    public function differenceDate($datedebut, $dateFin)
    {
        $time = strtotime($datedebut);
        $time2 = strtotime($dateFin);
        $diff = $time2 - $time;
        $diff /= 3600;
        if ($diff > 24 or $diff <0)
            return 24;
        else
            return round($diff, 2);

    }

    public function differenceDate1($datedebut, $dateFin)
    {
        $time = strtotime($datedebut);
        $time2 = strtotime($dateFin);
        $diff = $time2 - $time;
        $diff /= 3600;

            return round($diff, 2);

    }
    public function findbystatue($dated, $datef, $user)
    {
        $qb = $this->createQueryBuilder('t')
            // ->Where('t.status = '.$status)
            ->Where("t.dcr >='" . $dated->format('Y-m-d') . "'")
            ->andWhere("t.dcr <='" . $datef->format('Y-m-d') . "'");
        if ($user != null) {
            $qb->andWhere("t.user = " . $user->getId());
        }
        //echo $qb->getQuery()->getSQL();exit;
        return $qb->getQuery()->getResult();
    }

    public function recupererNombreEtatCoupon($partenaire,$deal)
    {
//ici
        if($partenaire and !$deal)
        {
            $sql = "select coup ";
            $from = " from Back\CommandeBundle\Entity\Coupon as coup,";
            $from .= " Back\CommandeBundle\Entity\Command as cmd,";
            $from .= "Back\PlanningBundle\Entity\Planning as pla,";
            $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Reference as ref,";
            $from .= "Back\ContractBundle\Entity\Protocol as pro,";
            $where = " where coup.command = cmd.id and";
            $where .= "  cmd.reference = ref.id and";
            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ann.protocol = pro.id and";
            $where .= "  pro.user = ".$partenaire."  and";


            $where = substr($where, 0, -4);
            $from = substr($from, 0, -1);
            $query = $sql . $from . $where . " group by coup.id ";
            $qb = $this->getEntityManager()->createQuery($query);
            return $qb->getResult();
        }
        elseif($deal and !$partenaire)
        {
            $sql = "select coup ";
            $from = " from Back\CommandeBundle\Entity\Coupon as coup,";
            $from .= " Back\CommandeBundle\Entity\Command as cmd,";
            $from .= "Back\PlanningBundle\Entity\Planning as pla,";
            $from .= "Back\DealBundle\Entity\Deal as deal,";
            $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Reference as ref,";
            $where = " where coup.command = cmd.id and";
           // $where .= "  cmd.deal = deal.id and";
            $where .= "  cmd.reference = ref.id and";
            $where .= "  deal.planning = pla.id and";

            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ref.annexe = ann.id and";
            $where .= "  deal.id = ".$deal."  and";


            $where = substr($where, 0, -4);
            $from = substr($from, 0, -1);
            $query = $sql . $from . $where . " group by coup.id ";
            //echo $query; exit;
            $qb = $this->getEntityManager()->createQuery($query);
            //echo $qb->getSQL(); exit;
            return $qb->getResult();
        }
        else
        {
            $sql = "select coup ";
            $from = " from Back\CommandeBundle\Entity\Coupon as coup,";
            $from .= " Back\CommandeBundle\Entity\Command as cmd,";
            $from .= "Back\PlanningBundle\Entity\Planning as pla,";
            $from .= "Back\DealBundle\Entity\Deal as deal,";
            $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Reference as ref,";
            $where = " where coup.command = cmd.id and";
            // $where .= "  cmd.deal = deal.id and";
            $where .= "  cmd.reference = ref.id and";
            $where .= "  deal.planning = pla.id and";

            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ref.annexe = ann.id and";
            //$where .= "  deal.id = ".$deal."  and";


            $where = substr($where, 0, -4);
            $from = substr($from, 0, -1);
            $query = $sql . $from . $where . " group by coup.id ";
            //echo $query; exit;
            $qb = $this->getEntityManager()->createQuery($query);
            //echo $qb->getSQL(); exit;
            return $qb->getResult();
        }


    }
    public function recupererMoyenneCoupon($planning)
    {
        $sql = "select ref ";
        $from = " from Back\PlanningBundle\Entity\Planning as pla,";
        $from .= "Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "Back\ContractBundle\Entity\Reference as ref,";
        $where = " where pla.defaultannexe = ann.id and";
        $where .= "  ref.annexe = ann.id and";
        $where .= "  pla.id = ".$planning."  and";


        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by ref.id ";
        $qb = $this->getEntityManager()->createQuery($query);

        return $qb->getResult();
    }
    public function recupererObjectifCa($partenaire,$deal)
    {
//ici
        if($partenaire and !$deal)
        {
            $sql = "select pla ";
            $from = " from Back\CommandeBundle\Entity\Coupon as coup,";
            $from .= " Back\CommandeBundle\Entity\Command as cmd,";
            $from .= "Back\PlanningBundle\Entity\Planning as pla,";
            $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Reference as ref,";
            $from .= "Back\ContractBundle\Entity\Protocol as pro,";
            $where = " where coup.command = cmd.id and";
            $where .= "  cmd.reference = ref.id and";
            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ann.protocol = pro.id and";
            $where .= "  pro.user = ".$partenaire."  and";


            $where = substr($where, 0, -4);
            $from = substr($from, 0, -1);
            $query = $sql . $from . $where . " group by pla.id ";
            $qb = $this->getEntityManager()->createQuery($query);
           // echo $qb->getSQL(); exit;
            return $qb->getResult();
        }
        elseif($deal and !$partenaire)
        {
            $sql = "select pla ";
            $from = " from Back\CommandeBundle\Entity\Coupon as coup,";
            $from .= " Back\CommandeBundle\Entity\Command as cmd,";
            $from .= "Back\PlanningBundle\Entity\Planning as pla,";
            $from .= "Back\DealBundle\Entity\Deal as deal,";
            $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Reference as ref,";
            $where = " where coup.command = cmd.id and";
            // $where .= "  cmd.deal = deal.id and";
            $where .= "  cmd.reference = ref.id and";
            $where .= "  deal.planning = pla.id and";

            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ref.annexe = ann.id and";
            $where .= "  deal.id = ".$deal."  and";


            $where = substr($where, 0, -4);
            $from = substr($from, 0, -1);
            $query = $sql . $from . $where . " group by pla.id ";
            //echo $query; exit;
            $qb = $this->getEntityManager()->createQuery($query);
            return $qb->getResult();
        }
        else
        {
            $sql = "select pla ";
            $from = " from Back\CommandeBundle\Entity\Coupon as coup,";
            $from .= " Back\CommandeBundle\Entity\Command as cmd,";
            $from .= "Back\PlanningBundle\Entity\Planning as pla,";
            $from .= "Back\DealBundle\Entity\Deal as deal,";
            $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Reference as ref,";
            $where = " where coup.command = cmd.id and";
            // $where .= "  cmd.deal = deal.id and";
            $where .= "  cmd.reference = ref.id and";
            $where .= "  deal.planning = pla.id and";

            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ref.annexe = ann.id and";
           // $where .= "  deal.id = ".$deal."  and";


            $where = substr($where, 0, -4);
            $from = substr($from, 0, -1);
            $query = $sql . $from . $where . " group by pla.id ";
            //echo $query; exit;
            $qb = $this->getEntityManager()->createQuery($query);
            return $qb->getResult();
        }



    }

    public function recupererDelaiTraitementTicket($idTicket)
    {
        //recuperer Date de début traitement ticket
        $sql = "select MIN( tickM.dcr) as encours ";
        $from = " from Back\CommandeBundle\Entity\TicketHistorique as tickM ";
        $where = " where tickM.ticket =  " . $idTicket . " and";
        $where .= "  tickM.action ='En cours' and";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $dateEnCours = $qb->getSingleResult()["encours"];

        //recuperer Date de fin traitement ticket

        $sql = "select  MAX(tickM.dcr) as maxDate ";
        $from = " from Back\CommandeBundle\Entity\TicketHistorique as tickM ";
        $where = " where tickM.ticket =  " . $idTicket . " and";
        $where .= "  tickM.action ='Cloturé' and";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $dateCloture = $qb->getSingleResult()["maxDate"];
//echo self::differenceDate($dateEnCours, $dateCloture)."----".$idTicket."<br/>";
        return self::differenceDate($dateEnCours, $dateCloture);

    }


    public function recupererDelaiTraitementTicketFerme($idTicket)
    {
        //recuperer Date de début traitement ticket
        $sql = "select Min(tickM.dcr) as creation ";
        $from = " from Back\CommandeBundle\Entity\Ticket as tickM ";
        $where = " where tickM.id =  " . $idTicket . " and";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $dateCreation = $qb->getSingleResult()["creation"];

        //recuperer Date de fin traitement ticket

        $sql = "select  MAX(tickM.dcr) as maxDate ";
        $from = " from Back\CommandeBundle\Entity\TicketHistorique as tickM ";
        $where = " where tickM.ticket =  " . $idTicket . " and";
        $where .= "  tickM.action ='Cloturé' and";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $dateCloture = $qb->getSingleResult()["maxDate"];
        $datetime1 = new \DateTime($dateCreation);
        $datetime2 = new \DateTime($dateCloture);
//echo self::differenceDate($dateCreation, $dateCloture)."----".$idTicket."<br/>";

        $interval = $datetime1->diff($datetime2);
        return $interval->format('%D jours, %H heures %I minutes');

    }

    public function recupererListeTicketCloture($date, $user)
    {
        $sql = "select tickH ";
        $from = " FROM Back\CommandeBundle\Entity\TicketHistorique as tickH,";
        $where = " where tickH.action ='Cloturé' and";

        $where .= " tickH.dcr LIKE '" . $date . "%' and ";

        if (isset($user)) {
            $where .= " tickH.user =" . $user->getId() . " and ";
        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by tickH.id ";
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

    public function recupererListeTicketCloturee($dated, $datef, $user)
    {
        $sql = "select tick ";
        $from = " FROM Back\CommandeBundle\Entity\Ticket as tick,";
        $where = " where  tick.status =3 and";

        $where .= " tick.dcr BETWEEN  '" . $dated->format('Y-m-d') . "' AND  '" . $datef->format('Y-m-d') . "' and ";

        if (isset($user)) {
            $where .= " tick.user =" . $user->getId() . " and ";
        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . "  ";
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL(); exit;
        return $qb->getResult();
    }

    public function recupererListeTicket($dated, $datef)
    {
        $sql = "select tick ";
        $from = " FROM Back\CommandeBundle\Entity\Ticket as tick,";
        $where = " where  tick.status =3 and";

        $where .= " tick.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . "  ";
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL(); exit;
        return $qb->getResult();
    }

    public function traitementTicket($idTicket)
    {
        $sql = "select count(tickM) as nombre ";
        $from = " from Back\CommandeBundle\Entity\TicketMessage as tickM,";
        $where = " where tickM.ticket = $idTicket and";

        $where .= " tickM.user is not null and ";



        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . "  ";
        $qb = $this->getEntityManager()->createQuery($query);
         //echo $qb->getSQL(); exit;
        $result =  $qb->getResult();
        return $result[0]['nombre'];
    }

    public function nbrTicketCloture()
    {
        $sql = "select tick.dcr as openDate ,tickH.dcr as closeDate  ";
        $from = " FROM Back\CommandeBundle\Entity\Ticket as tick,";
        $from .= "  Back\CommandeBundle\Entity\TicketHistorique as tickH,";
        $where = " where tick.id = tickH.ticket and";
        $where .= " tick.status = 3 and ";
        $where .= " tickH.action = 'Cloturé' and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " ";
        $qb = $this->getEntityManager()->createQuery($query);
        $nombre = 0;
        foreach ($qb->getResult() as $value)
        {
            if(self::differenceDate1($value["openDate"]->format("Y-m-d H:i:s"), $value["closeDate"]->format("Y-m-d H:i:s")) <24)
            {
                $nombre +=1;
            }
        }
        return $nombre;



    }
    public function getListTicket($data)
    {
        // var_dump($data); exit;
        $sql = "select tick ";
        $from = " from Back\CommandeBundle\Entity\Ticket as tick,";
        $where = " where (1=1) and";
        //Filter par priorite

        if (isset($data['priorite'])) {
            $where .= " tick.priorite =" . $data['priorite'] . " and ";
        }
        //Filter par commande
        if (isset($data['commande'])) {
            $where .= " tick.commande =" . $data['commande'] . " and ";
        }
        //Filter Deal
        if (isset($data['deal'])) {
            $from .= "Back\CommandeBundle\Entity\Command as cmd ";
            $where .= " tick.commande=cmd.id and ";

            $where .= " cmd.deal   =" . $data['deal'] . " and ";

        }
        //Filter Assigé à
        if (isset($data['user'])) {
            $where .= " tick.user =" . $data['user'] . " and ";
        }
        if (isset($data['status'])) {
            $where .= " tick.status =" . $data['status'] . " and ";
        }
        //Filter client
        if (isset($data['pnamec'])) {
            $from .= "Back\CommandeBundle\Entity\TicketMessage as msg ,";
            $from .= "Back\CommandeBundle\Entity\Client as cli ,";
            $where .= " tick.id=msg.ticket and ";
            $where .= " msg.client=cli.id and ";

                $filtre = explode(" " ,$data['pnamec']);
                $name = $filtre[0];

            if(isset($filtre[1]))
                $fname = $filtre[1];
            else
                $fname = $filtre[0];

            $where .= " cli.name   like '%" . $name . "%' and ";
            $where .= " cli.fname   like '%" . $fname . "%' and ";
        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by tick.id order by tick.id DESC
          ";
        $qb = $this->getEntityManager()->createQuery($query);
        // echo $qb->getSQL(); exit;
        return $qb->getResult();
    }

    public function findAgent()
    {
        $sql = "select usr ";
        $from = " from User\UserBundle\Entity\User as usr ";
        $where = " where usr.roles LIKE '%SERVICECLIENT%'  ";
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);

        return $qb->getResult();
    }

    public function Disponiblite($idServiceClient)
    {
        $sql = "select count(tic) as nombre  ";
        $from = " FROM Back\CommandeBundle\Entity\Ticket as tic ";
        $where = " where tic.user = " . $idServiceClient . " AND ";
        $where .= "  tic.status !=3  ";
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        if (count($result) > 0)
            return $result[0]['nombre'];
        else
            return 0;
    }

    public function ListServiceClient()
    {
        $sql = "select usr  ";
        $from = " FROM User\UserBundle\Entity\User as usr ";
        $where = " where usr.roles LIKE '%SERVICECLIENT%' AND ";
        $where .= "  usr.enabled =1  ";
        $query = $sql . $from . $where;
        //echo $query; exit;
        $qb = $this->getEntityManager()->createQuery($query);
//echo $qb->getSQL();
        $result = $qb->getResult();
        return $result;
    }

    public function getListCmd($data)
    {
        $sql = "select cmd ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where (1=1) and";
        if (isset($data['dpaf'])) {
            $dpaf = Tools::reformatDate($data['dpaf']);
            $where .= " cmd.dcr >='" . $dpaf->format('Y-m-d') . " 00:00:00" . "' and ";
        }
        if (isset($data['dpat'])) {
            $dpat = Tools::reformatDate($data['dpat']);
            $where .= " cmd.dcr <='" . $dpat->format('Y-m-d') . " 23:59:59" . "' and ";
        }
        if (isset($data['dpafp'])) {
            $dpaf = Tools::reformatDate($data['dpafp']);
            $where .= " cmd.dpa >='" . $dpaf->format('Y-m-d') . " 00:00:00" . "' and ";
        }
        if (isset($data['dpatp'])) {
            $dpat = Tools::reformatDate($data['dpatp']);
            $where .= " cmd.dpa <='" . $dpat->format('Y-m-d') . " 23:59:59" . "' and ";
        }
        if (isset($data['etat'])) {
            $where .= " cmd.etat =" . $data['etat'] . " and ";
        }
        if (isset($data['vadd'])) {
            if ($data['vadd'] == 0)
                $where .= " cmd.user is null and ";
            else
                $where .= " cmd.user is not null and ";
        }
        if (isset($data['deal'])) {
            $where .= " cmd.deal =" . $data['deal'] . " and ";
        }
        if (isset($data['pnamec']) || isset($data['namec']) || isset($data['emailc']) || isset($data['cincc']) || isset($data['telc'])) {
            $from .= "Back\CommandeBundle\Entity\Client as cli,";
            $where .= " cmd.client=cli.id and ";
            if (isset($data['pnamec'])) {
                $where .= " cli.name  like '%" . $data['pnamec'] . "%' and ";
            }
            if (isset($data['namec'])) {
                $where .= " cli.fname  like '%" . $data['namec'] . "%' and ";
            }
            if (isset($data['emailc'])) {
                $where .= " cli.email  like '%" . $data['emailc'] . "%' and ";
            }
            if (isset($data['cincc'])) {
                $where .= " cli.cin  like '%" . $data['cincc'] . "%' and ";
            }
            if (isset($data['telc'])) {
                $where .= " cli.phone  like '%" . $data['telc'] . "%' and ";
            }


        }
        if (isset($data['numcoupon'])) {
            $from .= "Back\CommandeBundle\Entity\Coupon   as cop,";
            $where .= " cmd.id=cop.command and cop.code='" . $data['numcoupon'] . "' and ";

        }
        if (isset($data['paypar'])) {
            $where .= " cmd.caisse  = " . $data['paypar'] . " and ";
        }
        if (isset($data['user'])) {
            $where .= " cmd.user  = " . $data['user'] . " and ";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by cmd.id order by cmd.id DESC
          ";
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

    public function getNombreCommandeParClient($client)

    {

        $sql = "select count(cmd) as nombre ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where cmd.etat=1 and";
        $where .= " cmd.client =" . $client . " and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);

        $result = $qb->getResult();
        return $result[0]['nombre'];
    }

    public function getListSuiviCmd($data, $type)
    {

        $sql = "select cmd ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where (1=1) and";

        if (isset($data['etat'])) {
            $where .= " cmd.etat =" . $data['etat'] . " and ";
        }

        if (isset($data['deal'])) {
            $where .= " cmd.deal =" . $data['deal'] . " and ";
        }


        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

    public function findVillesLike($term, $limit = 10)
    {

        $qb = $this->createQueryBuilder('c');
        $qb->select('c.libelle, c.codePostal')
            ->where('c.libelle LIKE :term')
            ->setParameter('term', '%' . $term . '%')
            ->setMaxResults($limit);

        $arrayAss = $qb->getQuery()
            ->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = array("CodePostal" => $data['codePostal'], "Ville" => $data['libelle']);
        }

        return $array;
    }

    public function findCodesPostauxLike($term, $limit = 10)
    {

        $qb = $this->createQueryBuilder('c');
        $qb->select('c.libelle, c.codePostal')
            ->where('c.codePostal LIKE :term')
            ->setParameter('term', '%' . $term . '%')
            ->setMaxResults($limit);

        $arrayAss = $qb->getQuery()
            ->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = array("CodePostal" => $data['codePostal'], "Ville" => $data['libelle']);
        }

        return $array;
    }
}
