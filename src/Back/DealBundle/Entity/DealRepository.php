<?php

namespace Back\DealBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Back\DashBundle\Common\Tools;

/**
 * DealRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DealRepository extends EntityRepository
{
    public function getCommented()
    {
        $query = $this->createQueryBuilder("c")
            ->join('Back\DealBundle\Entity\Vote', 'cmt')
            ->where('c.id = cmt.deal');
        // echo $query->getQuery()->getSQL();exit;
        return $query;
    }

    public function getDealByUser($user, $dated = null, $datef = null)
    {
        if ($dated == null && $datef == null) {
            $query = $this->getEntityManager()
                ->createQuery("select deal  from
                                Back\DealBundle\Entity\Deal as deal ,
                                Back\PlanningBundle\Entity\Planning as plan,
                                Back\ContractBundle\Entity\Annexe as annex ,
                                Back\ContractBundle\Entity\Protocol as protocole,
                                User\UserBundle\Entity\User as user
                                where  deal.planning=plan.id
                                and plan.state=3
                                and plan.defaultannexe=annex.id
                                and annex.protocol=protocole.id
                                and protocole.user=user.id
                                and user.id=" . $user->getId() . "
                            order by deal.id DESC
                            ");
        } else {
            $query = $this->getEntityManager()
                ->createQuery("select deal  from
                                Back\DealBundle\Entity\Deal as deal ,
                                Back\PlanningBundle\Entity\Planning as plan,
                                Back\ContractBundle\Entity\Annexe as annex ,
                                Back\ContractBundle\Entity\Protocol as protocole,
                                User\UserBundle\Entity\User as user
                                where  deal.planning=plan.id
                                and plan.state=3
                                and plan.defaultannexe=annex.id
                                and annex.protocol=protocole.id
                                and protocole.user=user.id
                                and plan.startDate <=  '" . $dated->format('Y-m-d ') . " 00:00:00'
                                and plan.endDate >=  '" . $datef->format('Y-m-d ') . " 23:59:59'
                                and user.id=" . $user->getId() . "
                            order by deal.id DESC
                            ");
        }
        //echo $query->getSQL();exit;
        return $query->getResult();
    }

    public function listByCotegory($category, $id = -1, $limit = null)
    {
        $dt = new \DateTime();
        if ($id == -1) {
            if (!is_array($category)) {
                $query = $this->getEntityManager()
                    ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan,
                            Back\PlanningBundle\Entity\Category as cat
                            where  deal.planning=plan.id
                            and  plan.categoryId=cat.id
                            and plan.state=3
                            and (cat.id = " . $category->getId() . " or cat.parent=" . $category->getId() . ")
                            and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.state = 3 
                            order by plan.regionId, plan.startDate DESC
                            ");
            } else {
                $sql = "select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan,
                            Back\PlanningBundle\Entity\Category as cat
                            where  deal.planning=plan.id
                and  plan.categoryId=cat.id
                and plan.state=3 ";
                foreach ($category as $value) {
                    $sql .= "and (cat.id = " . $value . " or cat.parent=" . $value . ")";
                }
                $sql .= "and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            order by plan.regionId, plan.startDate DESC";
                $query = $this->getEntityManager()->createQuery($sql);
            }
        } else if ($id > 0) {
            if (!is_array($category)) {
                $query = $this->getEntityManager()
                    ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan,
                            Back\PlanningBundle\Entity\Region as region,
                            Back\PlanningBundle\Entity\Category as cat
                            where  deal.planning=plan.id
                            and  plan.categoryId=cat.id
                            and  plan.regionId=region.id
                            and plan.state=3
                            and region.id=$id
                            and (cat.id = " . $category->getId() . " or cat.parent=" . $category->getId() . ")
                            and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            order by plan.regionId DESC, plan.startDate DESC
                            ");
            } else {
                $sql = "select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan,
                            Back\PlanningBundle\Entity\Region as region,
                            Back\PlanningBundle\Entity\Category as cat
                            where  deal.planning=plan.id
                            and  plan.categoryId=cat.id
                            and  plan.regionId=region.id
                            and plan.state=3
                            and region.id=$id , plan.startDate DESC";
                foreach ($category as $value) {
                    $sql .= "and (cat.id = " . $value . " or cat.parent=" . $value . ")";
                }
                $sql .= "and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            order by plan.regionId DESC, plan.startDate DESC";
                $query = $this->getEntityManager()->createQuery($sql);
            }
        } else {
            return null;
        }
        //echo $query->getSQL();exit;
        if ($limit != null) {
            $query->setMaxResults($limit);
        }
        return $query->getResult();
    }

    public function getAllDealCategorie($category)
    {
        $sql = "select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan,
                            Back\PlanningBundle\Entity\Category as cat
                            where  deal.planning=plan.id
                            and  plan.categoryId=cat.id
                            and plan.state=3  ";
        $sqlx = "";
        foreach ($category as $value) {
            $sqlx .= " cat.id =  " . $value . "  or ";
        }

        if ($sqlx != "") {
            $sqlx = substr($sqlx, 0, -3);
            $sql .= " and ($sqlx)  GROUP BY deal.id";
        } else {
            $sql .= " GROUP BY deal.id";
        }

        $query = $this->getEntityManager()
            ->createQuery($sql);
        return $query->getResult();
    }

    public function getdealrest()
    {
        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan
                            where  deal.planning=plan.id
                            and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            order by deal.id ASC
                            ");
        return $query->getResult();
    }

    public function getDealSearch1($dateD, $dateF)
    {
        $sql = "select deal  ";
        $from = " from Back\DealBundle\Entity\Deal as deal";
        $where = " where deal.startDateValidtyCoupon >  '" . $dateD . "' and";
        $where .= " deal.startDateValidtyCoupon <  '" . $dateF . "'";
        $where .= " order by deal.id ";
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }

    public function getDealSearchNow($dateD, $dateF)
    {
        $sql = "select deal  ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan ";
        $where = " where deal.startDateValidtyCoupon >  '" . $dateD . "' and";
        $where .= " deal.startDateValidtyCoupon <  '" . $dateF . "' and";
        $where .= " deal.planning=plan.id and";
        $where .= " plan.state=3 ";
        $where .= " order by deal.id ";
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }
      public function getDealSearch2($dateD, $dateF,$region)
    {
        $sql = "select deal  ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\PlanningBundle\Entity\Region as region ";
        $where = " where deal.startDateValidtyCoupon >  '" . $dateD . "' and";
        $where .= " deal.startDateValidtyCoupon <  '" . $dateF . "' and";
        $where .= " deal.planning=plan.id and";
        $where .= " plan.regionId= '" . $region . "' ";

        $where .= " order by deal.id ";
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }


    public function getDealSearch22($dateD, $dateF)
    {
        $sql = "select deal  ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\PlanningBundle\Entity\Region as region ";
        $where = " where deal.endDateValidtyCoupon >  '" . $dateD . "' and";
        $where .= " deal.endDateValidtyCoupon <  '" . $dateF . "' and";
        $where .= " deal.planning=plan.id ";
        $where .= " order by deal.id ";
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }




    public function getDealSearch($dateD, $dateF)
    {
        $sql = "select deal.id,deal.title as dealtitle  ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan ";
        $where = " where deal.planning=plan.id and";
        $where .= " plan.state=3 and";
        $where .= " deal.startDateValidtyCoupon >  '" . $dateD . "' and";
        $where .= " deal.startDateValidtyCoupon <  '" . $dateF . "'";
        $where .= " order by deal.id ";
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }


    public function getCoupon($idDeal, $etat)
    {
        $sql = "select cmd ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $where = " where cmd.id = coup.command and";
        $where .= "  cmd.deal =  '$idDeal '   and ";
        $where .= "  coup.recu = ' $etat '   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL(); exit;
        return count($qb->getResult());

    }

    public function getCouponByRef($idDeal,$idRef, $etat)
    {
        $sql = "select count(cmd) as countt ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $where = " where cmd.id = coup.command and";
        $where .= "  cmd.deal =  '$idDeal '   and ";
        $where .= "  cmd.reference =  '$idRef '  and ";
        $where .= "  coup.recu = ' $etat '   and ";
        $where .= "  coup.vendu = 3   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return $result[0]['countt'];


    }


    public function getCouponByAll($idDeal, $etat)
    {
        $sql = "select count(cmd) as countt ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $where = " where cmd.id = coup.command and";
        $where .= "  cmd.deal =  '$idDeal '   and ";
        $where .= "  coup.recu = ' $etat '   and ";
        $where .= "  coup.vendu = 3   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return $result[0]['countt'];


    }


    public function getCouponByRefVendu($idDeal,$idRef, $etat)
    {
        $sql = "select cmd ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $where = " where cmd.id = coup.command and";
        $where .= "  cmd.deal =  '$idDeal '   and ";
        $where .= "  cmd.reference =  '$idRef '   and ";
        $where .= "  coup.vendu = ' $etat '   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getSQL(); exit;
        return count($qb->getResult());

    }

    public function findAcheteurByReferenceParClient($idClient, $idReference)
    {
        $query = $this->getEntityManager()
            ->createQuery("select coupon  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd,
                            Back\CommandeBundle\Entity\Client as cli
                            where  coupon.command=cmd.id
                            and cmd.client =cli.id
                            and coupon.vendu in(2,3)
                            and cmd.reference =  '" . $idReference . "'
                            and cli.id =  '" . $idClient . "'
                            ");
        return count($query->getResult());
    }

    public function findAcheteurByReference($idReference)
    {
        $query = $this->getEntityManager()
            ->createQuery("select coupon  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.vendu in(2,3)
                            and cmd.reference =  '" . $idReference . "'

                            ");
        return count($query->getResult());
    }

    public function findAcheteurByReferenceRecap($idReference,$idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select count(coupon)  as nombre  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.vendu in( 2,3)
                            and cmd.deal =  '" . $idDeal . "'
                            and cmd.reference =  '" . $idReference . "'

                            ");
        return $query->getResult()[0]['nombre'];
    }


    public function countCouponConsomme($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select count(coupon)  as nombre  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.recu in( 2,3)
                            and cmd.deal =  '" . $idDeal . "'

                            ");
        return $query->getResult()[0]['nombre'];
    }

    public function countCouponNonConsomme($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select count(coupon)  as nombre  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.recu =1
                            and coupon.vendu in( 2,3)
                            and cmd.deal =  '" . $idDeal . "'

                            ");
        return $query->getResult()[0]['nombre'];
    }

    public function countCouponRemourser($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select count(coupon)  as nombre  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.vendu = 5
                            and cmd.deal =  '" . $idDeal . "'

                            ");
        return $query->getResult()[0]['nombre'];
    }





    public function countCouponFacture($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select count(coupon)  as nombre  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.recu = 3
                            and cmd.deal =  '" . $idDeal . "'

                            ");
        return $query->getResult()[0]['nombre'];
    }

    public function countCouponNonFactureR1($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select count(coupon)  as nombre  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.recu =2
                            and cmd.deal =  '" . $idDeal . "'

                            ");
        return $query->getResult()[0]['nombre'];
    }


    public function countCouponNonFactureR2($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select count(coupon)  as nombre  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.recu =1
                            and coupon.vendu in( 2,3)
                            and cmd.deal =  '" . $idDeal . "'

                            ");
        return $query->getResult()[0]['nombre'];
    }




    public function findAcheteurByDealRecap($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select count(coupon)  as nombre  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.vendu in( 2,3)
                            and cmd.deal =  '" . $idDeal . "'

                            ");
        return $query->getResult()[0]['nombre'];
    }


    public function findAcheteurByPrice($idReference,$idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select SUM(coupon.price)  as price  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.vendu = 5
                            and cmd.deal =  '" . $idDeal . "'
                            and cmd.reference =  '" . $idReference . "'

                            ");
        return $query->getResult()[0]['price'];
    }

    public function findAcheteurByPriceByDeal($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select SUM(coupon.price)  as price  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd
                            where  coupon.command=cmd.id
                            and coupon.vendu = 5
                            and cmd.deal =  '" . $idDeal . "'

                            ");
        return $query->getResult()[0]['price'];
    }



    public function findExpireDeal($idDeal)
    {
        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
        Back\DealBundle\Entity\Deal as deal ,
        Back\PlanningBundle\Entity\Planning as plan,
        Back\ContractBundle\Entity\Annexe as annex ,
        Back\ContractBundle\Entity\Protocol as protocole
        where  deal.planning=plan.id
        and deal.id=" . $idDeal . "
        and plan.defaultannexe=annex.id
        and annex.protocol=protocole.id
        and plan.endDate <  '" . $dt->format('Y-m-d H:i:s') . "' ");
        //echo $query->getSQL();exit;
        return count($query->getResult());
    }

    public function getNbrCouponParClient($idDeal, $idClient)
    {
        $query = $this->getEntityManager()
            ->createQuery("select coupon  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd ,
                            Back\DealBundle\Entity\Deal as deal
                            where  coupon.command=cmd.id
                            and coupon.vendu in (2 , 3)
                            and cmd.deal =deal.id
                            and deal.id =  '" . $idDeal . "'
                            and cmd.client =  '" . $idClient . "'

                            ");
        return $query->getResult();
    }

    public function findNombreAcheteur($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select coupon  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd ,
                            Back\DealBundle\Entity\Deal as deal
                            where  coupon.command=cmd.id
                            and coupon.vendu in (2 , 3)
                            and cmd.deal =deal.id
                            and deal.id =  '" . $idDeal . "'

                            ");

        // return $query->getResult();
        return count($query->getResult());
    }

    public function findAcheteur($idDeal)
    {
        $query = $this->getEntityManager()
            ->createQuery("select coupon  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd ,
                            Back\DealBundle\Entity\Deal as deal
                            where  coupon.command=cmd.id
                            and coupon.vendu in(2,3)
                            and cmd.deal =deal.id
                            and deal.id =  '" . $idDeal . "'

                            ");
        //echo $query->getSQL();
        // return $query->getResult();
        return count($query->getResult());
    }


    public function findAcheteurMarchant($idDeal, $idUsers)
    {
        $query = $this->getEntityManager()
            ->createQuery("select coupon  from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd ,
                            Back\DealBundle\Entity\Deal as deal,
                            User\UserBundle\Entity\User as users

                            where  coupon.command=cmd.id
                            and users.id = '" . $idUsers . "'
                            and coupon.vendu in(2,3)
                            and cmd.deal =deal.id
                            and deal.id =  '" . $idDeal . "'

                            ");
        //echo $query->getSQL();
        // return $query->getResult();
        return count($query->getResult());
    }


    public function getHomePage($id = -1)
    {
        $dt = new \DateTime();
        if ($id == -1) {
            $query = $this->getEntityManager()
                ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan,
							Back\PlanningBundle\Entity\Region as region

                            where  deal.planning=plan.id
							and  plan.regionId=region.id

                            and plan.state=3

                            and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            order by region.id ASC, plan.startDate DESC
                            ");
        } else if ($id > 0) {
            $query = $this->getEntityManager()
                ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan,
                            Back\PlanningBundle\Entity\Region as region
                            where deal.planning=plan.id
                            and  plan.regionId=region.id
                            and plan.state=3
                            and region.id=$id
                            and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            order by region.id ASC, plan.startDate DESC
                            ");
        } else {
            return null;
        }
        // ->setMaxResults(4);

        return $query->getResult();
    }

    public function getDealNow($query)
    {
        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan
                            where  deal.planning=plan.id

                            and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.state =  3 
                            and deal.title like '%" . addslashes($query) . "%'
                            order by deal.id DESC
                            ");

        return $query->getResult();
    }

    public function getDealfilter($query)
    {
        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal

                            where deal.title like '%" . addslashes($query) . "%'
                            or deal.title like '%" . addslashes($query) . "'
                            or deal.title like '" . addslashes($query) . "%'
                            order by deal.id DESC
                            ");

        return $query->getResult();
    }

    public function findDealPasser($id)
    {
        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
        Back\DealBundle\Entity\Deal as deal ,
        Back\PlanningBundle\Entity\Planning as plan,
        Back\ContractBundle\Entity\Annexe as annex ,
        Back\ContractBundle\Entity\Protocol as protocole
        where  deal.planning=plan.id
        and plan.defaultannexe=annex.id
        and plan.state=3
        and deal.id='" . $id . "'
        and annex.protocol=protocole.id
        and plan.endDate <  '" . $dt->format('Y-m-d H:i:s') . "' ");
        //echo $query->getSQL();exit;
        return count($query->getResult());

    }

    public function passedDeal()
    {
        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
        Back\DealBundle\Entity\Deal as deal ,
        Back\PlanningBundle\Entity\Planning as plan,
        Back\ContractBundle\Entity\Annexe as annex ,
        Back\ContractBundle\Entity\Protocol as protocole
        where  deal.planning=plan.id
        and plan.defaultannexe=annex.id
        and plan.state=3
        and annex.protocol=protocole.id
        and plan.endDate <  '" . $dt->format('Y-m-d H:i:s') . "' 
		ORDER BY plan.endDate DESC
		");
        //echo $query->getSQL();exit;
        return $query->getResult();
    }

    public function passedDealParCategorie($categorie)
    {
        $dt = new \DateTime();
        $sql = "select deal  from
        Back\DealBundle\Entity\Deal as deal ,
        Back\PlanningBundle\Entity\Planning as plan,
        Back\ContractBundle\Entity\Annexe as annex ,
        Back\ContractBundle\Entity\Protocol as protocole
        where  deal.planning=plan.id
        and plan.defaultannexe=annex.id
        and plan.state=3
        and annex.protocol=protocole.id
        and plan.endDate <  '" . $dt->format('Y-m-d H:i:s') . "' 
		
		";
        if ($categorie) {
            $sql .= "   and plan.categoryId IN (  " . implode(',', $categorie) . " ) ";
        }
        $sql .= "   ORDER BY plan.endDate DESC ";

        $query = $this->getEntityManager()
            ->createQuery($sql);
        //echo $query->getSQL();exit;
        return $query->getResult();
    }

    public function getDealPasser($id)
    {

        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
        Back\DealBundle\Entity\Deal as deal ,
        Back\PlanningBundle\Entity\Planning as plan,
        Back\ContractBundle\Entity\Annexe as annex ,
        Back\ContractBundle\Entity\Protocol as protocole ,
        User\UserBundle\Entity\User as us
        where  deal.planning=plan.id
        and plan.defaultannexe=annex.id
        and annex.protocol=protocole.id
        and protocole.user=us.id
        and plan.state=3
        and us.id=$id
        and plan.endDate <   '" . $dt->format('Y-m-d H:i:s') . "' ");

        return $query->getResult();
    }

    public function getDealDateById($id)
    {
        $query = $this->getEntityManager()
            ->createQuery("select plan  from
        Back\DealBundle\Entity\Deal as deal ,
        Back\PlanningBundle\Entity\Planning as plan,
        Back\ContractBundle\Entity\Annexe as annex
        where  deal.planning=plan.id
        and plan.defaultannexe=annex.id
        and plan.state=3
        and deal.id =   '" . $id . "' ");
        return $query->getResult();
    }

    public function getDealDateByIdS($id)
    {
        $query = $this->getEntityManager()
            ->createQuery("select plan  from
        Back\DealBundle\Entity\Deal as deal ,
        Back\PlanningBundle\Entity\Planning as plan,
        Back\ContractBundle\Entity\Annexe as annex
        where  deal.planning=plan.id
        and plan.defaultannexe=annex.id
        and plan.state=3
        and deal.id =   '" . $id . "' ");
        return $query->getResult()[0];
    }





    public function getListsDeal($id)
    {

        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
        Back\DealBundle\Entity\Deal as deal ,
        Back\PlanningBundle\Entity\Planning as plan,
        Back\ContractBundle\Entity\Annexe as annex ,
        Back\ContractBundle\Entity\Protocol as protocole ,
        User\UserBundle\Entity\User as us
        where  deal.planning=plan.id
        and plan.defaultannexe=annex.id
        and annex.protocol=protocole.id
        and protocole.user=us.id
        and plan.state=3
        and us.id=$id ");

        return $query->getResult();
    }

    public function getDeuiemeFacture($id)
    {
        $query1 = $this->getEntityManager()
            ->createQuery("select count(inv) as nbr  from
        Back\PartnerBundle\Entity\Invoice as inv
        where  inv.deal =  $id");
        $result = $query1->getResult();
        return ($result);

    }

    public function getCommition($id)
    {
        $query = $this->getEntityManager()
            ->createQuery("select cp.id,cp.code ,cp.price ,an.fixedCommission , an.variableCommission   from
        Back\CommandeBundle\Entity\Coupon as cp ,
        Back\DealBundle\Entity\Deal as d,
        Back\CommandeBundle\Entity\Command as co ,
        Back\PlanningBundle\Entity\Planning as p ,
        Back\ContractBundle\Entity\Annexe as an

        where  cp.command=co.id
        and co.deal=d.id
        and d.planning=p.id
        and p.defaultannexe=an.id
        and d.id =  $id");


        $result1 = $query->getResult();

        return $result1;
    }

    public function getDealsByUser($user)
    {
        $query = $this->getEntityManager()
            ->createQuery("select deal from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as planning,
                            Back\ContractBundle\Entity\Annexe as annexe,
                            Back\ContractBundle\Entity\Protocol as protocol,
                            User\UserBundle\Entity\User as partner
                            where deal.planning = planning.id
                            and planning.defaultannexe=annexe.id
                            and annexe.protocol=protocol.id
                            and protocol.user=partner.id
                            and partner.id=" . $user->getId() . "
                            ");
        //echo $query->getSQL();exit;
        return $query->getResult();
    }

    public function listByTousRegion()
    {
        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan
                            where  deal.planning=plan.id
                            and  plan.state=3
                            and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'
                            order by deal.id DESC
                            ");
        //echo $query->getSQL();exit;
        return $query->getResult();
    }

    public function listByRegion($region)
    {
        $dt = new \DateTime();
        $query = $this->getEntityManager()
            ->createQuery("select deal  from
                            Back\DealBundle\Entity\Deal as deal ,
                            Back\PlanningBundle\Entity\Planning as plan,
                            Back\PlanningBundle\Entity\Region as region
                            where  deal.planning=plan.id
                            and  plan.regionId=region.id
                            and  plan.state=3
                            and region.id=" . $region->getId() . "

                            and plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                            and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'

                            order by deal.id DESC
                            ");
        //echo $query->getSQL();exit;
        return $query->getResult();
    }

    public function getCouponFacturable1($id)
    {
        $query = $this->getEntityManager()
            ->createQuery("select cp.id,cp.code,cp.vendu,cp.recu ,cp.price ,an.fixedCommission , an.variableCommission   from
        Back\CommandeBundle\Entity\Coupon as cp ,
        Back\DealBundle\Entity\Deal as d,
        Back\CommandeBundle\Entity\Command as co ,
        Back\PlanningBundle\Entity\Planning as p ,
        Back\ContractBundle\Entity\Annexe as an
        where  cp.command=co.id
        and co.deal=d.id
        and d.planning=p.id
        and p.defaultannexe=an.id
        and cp.recu =2
        and d.id =  $id");

        $result1 = $query->getResult();

        return $result1;
    }

    public function getCouponFacturable($id)
    {
        $query = $this->getEntityManager()
            ->createQuery("select cp.id,cp.code,cp.vendu,cp.recu ,cp.price ,an.fixedCommission , an.variableCommission   from
        Back\CommandeBundle\Entity\Coupon as cp ,
        Back\DealBundle\Entity\Deal as d,
        Back\CommandeBundle\Entity\Command as co ,
        Back\PlanningBundle\Entity\Planning as p ,
        Back\ContractBundle\Entity\Annexe as an
        where  cp.command=co.id
        and co.deal=d.id
        and d.planning=p.id
        and p.defaultannexe=an.id
        and cp.vendu not in(1,2,6)
        and cp.recu in (2,3)
        and d.id =  $id");

        $result1 = $query->getResult();

        return $result1;
    }

    public function getCouponRecu($id)
    {
        $query = $this->getEntityManager()
            ->createQuery("select cp.id,cp.code,cp.vendu,cp.recu ,cp.price ,an.fixedCommission , an.variableCommission   from
        Back\CommandeBundle\Entity\Coupon as cp ,
        Back\DealBundle\Entity\Deal as d,
        Back\CommandeBundle\Entity\Command as co ,
        Back\PlanningBundle\Entity\Planning as p ,
        Back\ContractBundle\Entity\Annexe as an
        where  cp.command=co.id
        and co.deal=d.id
        and d.planning=p.id
        and p.defaultannexe=an.id
        and cp.recu=2
        and d.id =  $id");

        $result1 = $query->getResult();

        return $result1;
    }

    public function getListDealEnquetteSatisfaction($data)
    {
        $sql = "select cp ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as cp,";

        $from .= "  Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";


        $where = " where cmd.id = cp.command and";

        $where .= "  cmd.deal = deal.id and";
        $where .= "  deal.planning = plan.id and";
        $where .= "  plan.defaultannexe = ann.id and";
        $where .= "  ann.protocol = pro.id and";


        $where .= "  cp.vendu in( 2,3) and";
        /*-------------NEW filter----*/
        if (isset($data['id'])) {
            $where .= " deal.id ='" . $data['id'] . "' and ";
        }
        if (isset($data['title'])) {

            $where .= " ( deal.title like :text )
            and ";
        }
        if (isset($data['category'])) {
            $where .= " plan.categoryId ='" . $data['category'] . "' and ";
        }
        if (isset($data['region'])) {
            $where .= " plan.regionId ='" . $data['region'] . "' and ";
        }
        if (isset($data['partenar'])) {
            $where .= " pro.user =" . $data['partenar'] . " and ";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " GROUP BY cp.command ";
///echo $query; exit;
        $qb = $this->getEntityManager()->createQuery($query);
        if (isset($data['title'])) {
            $qb->setParameter('text', $data['title']);
        }
        // echo $qb->getSQL(); exit;
        return $qb->getResult();
    }

    public function getListRapportDeal($data)
    {
        $sql = "select cp ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as cp,";

        $from .= "  Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";


        $where = " where cmd.id = cp.command and";

        $where .= "  cmd.deal = deal.id and";
        $where .= "  deal.planning = plan.id and";
        $where .= "  plan.defaultannexe = ann.id and";
        $where .= "  ann.protocol = pro.id and";


        $where .= "  cp.vendu in( 2,3) and";
        /*-------------NEW filter----*/
        if (isset($data['id'])) {
            $where .= " deal.id ='" . $data['id'] . "' and ";
        }
        if (isset($data['title'])) {

            $where .= " ( deal.title like :text )
            and ";
        }
        if (isset($data['category'])) {
            $where .= " plan.categoryId ='" . $data['category'] . "' and ";
        }
        if (isset($data['region'])) {
            $where .= " plan.regionId ='" . $data['region'] . "' and ";
        }
        if (isset($data['partenar'])) {
            $where .= " pro.user =" . $data['partenar'] . " and ";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " order by cp.client ASC";
///echo $query; exit;
        $qb = $this->getEntityManager()->createQuery($query);
        if (isset($data['title'])) {
            $qb->setParameter('text', $data['title']);
        }
        // echo $qb->getSQL(); exit;
        return $qb->getResult();
    }

    public function getListRapportDeal1()
    {
        $sql = "select cp ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as cp,";

        $from .= "  Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";


        $where = " where cmd.id = cp.command and";

        $where .= "  cmd.deal = deal.id and";
        $where .= "  deal.planning = plan.id and";
        $where .= "  plan.defaultannexe = ann.id and";
        $where .= "  ann.protocol = pro.id and";


        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " order by cp.client ASC";
///echo $query; exit;
        $qb = $this->getEntityManager()->createQuery($query);
        if (isset($data['title'])) {
            $qb->setParameter('text', $data['title']);
        }
        // echo $qb->getSQL(); exit;
        return $qb->getResult();
    }

    public function getListDealLivraison($deal, $etat)
    {
        $sql = "select cp ";
        $from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as cp,";
        $where = " where cmd.id = cp.command and";
        $where .= "  cp.vendu in( 2,3)   and";
        if ($etat != "")
            $where .= "  cp.recu = " . $etat . "   and";
        $where .= " cmd.deal =" . $deal . " and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " order by cp.client ASC";
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

    public function getListDealPartenaire($data)
    {
        $sql = "select deal ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where (1=1) and";
        $where .= "  deal.planning = plan.id and";
        $where .= "  plan.defaultannexe = ann.id and";
        $where .= "  ann.protocol = pro.id and";

        $where .= " pro.user =" . $data . " and ";


        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by deal.id order by plan.startDate DESC
          ";
        $qb = $this->getEntityManager()->createQuery($query);
        if (isset($data['title'])) {
            $qb->setParameter('text', $data['title']);
        }
        return $qb->getResult();
    }

    public function getListDealRedacteur($data)
    {

        $sql = "select deal ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where (1=1) and";
        $where .= "  deal.planning = plan.id and";
        $where .= "  plan.defaultannexe = ann.id and";
        $where .= "  plan.state != 4 and";
        $where .= "  ann.protocol = pro.id and";

        if (isset($data['id'])) {
            $where .= " deal.id ='" . $data['id'] . "' and ";
        }
        $dt = new \DateTime();

        if (isset($data['en_cours'])) {
            $where .= "  plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                        and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'  and plan.state = 3 and  ";
        }
        else {

            if (isset($data['dpafp'])) {

                $dpafp = Tools::reformatDate($data['dpafp']);
                $where .= " plan.startDate >='" . $dpafp->format('Y-m-d H:i:s') . " ' and ";
            }

            if (isset($data['dpatp'])) {
                $dpatp = Tools::reformatDate($data['dpatp']);
                $where .= " plan.startDate <='" . $dpatp->format('Y-m-d H:i:s') . " ' and ";
            }
        }


        if (isset($data['title'])) {

            $where .= " ( deal.title like :text )
            and ";
        }
        if (isset($data['category'])) {
            $where .= " plan.categoryId ='" . $data['category'] . "' and ";
        }
        if (isset($data['region'])) {
            $where .= " plan.regionId ='" . $data['region'] . "' and ";
        }
        if (isset($data['partenar'])) {
            $where .= " pro.user =" . $data['partenar'] . " and ";
        }
        if (isset($data['dpafp'])) {
            $dpafp = Tools::reformatDate($data['dpafp']);
            $where .= " deal.startDateValidtyCoupon <='" . $dpafp->format('Y-m-d') . " 23:59:59" . "' and ";
        }
        if (isset($data['dpatp'])) {
            $dpafp = Tools::reformatDate($data['dpafp']);
            $where .= " and deal.endDateValidtyCoupon >='" . $dpafp->format('Y-m-d') . " 00:00:00" . "' and ";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by deal.id order by plan.startDate DESC
          ";
        $qb = $this->getEntityManager()->createQuery($query);
        if (isset($data['title'])) {
            $qb->setParameter('text', $data['title']);
        }
        return $qb->getResult();
    }

    public function getListDeal($data)
    {


        $sql = "select deal ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where (1=1) and";
        $where .= "  deal.planning = plan.id and";
        $where .= "  plan.defaultannexe = ann.id and";
        $where .= "  ann.protocol = pro.id and";
        if (isset($data['id'])) {
            $where .= " deal.id ='" . $data['id'] . "' and ";
        }
        if (isset($data['title'])) {

            $where .= " ( deal.title like :text )
            and ";
        }
        if (isset($data['category'])) {
            $where .= " plan.categoryId ='" . $data['category'] . "' and ";
        }
        if (isset($data['region'])) {
            $where .= " plan.regionId ='" . $data['region'] . "' and ";
        }
        if (isset($data['partenar'])) {
            $where .= " pro.user =" . $data['partenar'] . " and ";
        }
        $dt = new \DateTime();
        if (isset($data['en_cours'])) {
            $where .= "  plan.startDate <=  '" . $dt->format('Y-m-d H:i:s') . "'
                        and plan.endDate >=  '" . $dt->format('Y-m-d H:i:s') . "'  and plan.state = 3 and  ";
        }
        else {

            if (isset($data['dpafp'])) {

                $dpafp = Tools::reformatDate($data['dpafp']);
                $where .= " plan.startDate >='" . $dpafp->format('Y-m-d H:i:s') . " ' and ";
            }

            if (isset($data['dpatp'])) {

                $dpatp = Tools::reformatDate($data['dpatp']);
                $where .= " plan.startDate <='" . $dpatp->format('Y-m-d H:i:s') . " ' and ";
            }
        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by deal.id order by plan.startDate DESC
          ";
        $qb = $this->getEntityManager()->createQuery($query);
        if (isset($data['title'])) {
            $qb->setParameter('text', $data['title']);
        }
        return $qb->getResult();
    }

    public function totalAcheteurMarchant( $idUsers)
    {
        $query = $this->getEntityManager()
            ->createQuery("select COUNT(coupon.id)   from
                            Back\CommandeBundle\Entity\Coupon as coupon ,
                            Back\CommandeBundle\Entity\Command as cmd ,
                            Back\DealBundle\Entity\Deal as deal,
                            Back\PlanningBundle\Entity\Planning as plan,
                            Back\ContractBundle\Entity\Annexe as ann,
                            Back\ContractBundle\Entity\Protocol as pro,
                            User\UserBundle\Entity\User as users

                            where  coupon.command=cmd.id
                            and coupon.vendu in(2,3)
                            and cmd.deal =deal.id
                            and deal.planning =plan.id
                            and plan.defaultannexe =ann.id
                            and ann.protocol =pro.id
                            and pro.user =users.id
                            and users.id = " . $idUsers . "

                            ");
        // return $query->getResult();
        return $query->getSingleScalarResult();
    }

    public function totalRembursementMarchant($idPartenaire)
    {
        $sql = "select rem ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as rem,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as cp,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\DealBundle\Entity\Deal as dea,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where cp.id = rem.coupon and ";
        $where .= "  cmd.id =  cp.command   and ";
        $where .= "  cmd.deal =  dea.id   and ";
        $where .= "  dea.planning =  plan.id   and ";
        $where .= "  ann.id = plan.defaultannexe   and ";
        $where .= "  pro.id  =  ann.protocol and ";
        $where .= "  pro.user = " . $idPartenaire . "   and ";
        $where .= "  rem.virement IS NULL   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);

        $result1 = $qb->getResult();

        /*----------------------------------------*/

        $sql = "select rem ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as rem,";
        $from .= "  Back\CommandeBundle\Entity\Virement as vir,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as cp,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\DealBundle\Entity\Deal as dea,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where rem.coupon = cp.id and ";
        $where .= "  cp.command =  cmd.id   and ";
        $where .= "  cmd.deal =  dea.id   and ";
        $where .= "  dea.planning =  plan.id   and ";
        $where .= "  plan.defaultannexe = ann.id   and ";
        $where .= "  ann.protocol = pro.id   and ";
        $where .= "  pro.user = " . $idPartenaire . "   and ";
        $where .= "  rem.virement = vir.id   and ";
        $where .= "  vir.etat = 1   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result2 = $qb->getResult();
        return count($result1) + count($result2);

    }

    public function totalChiffreAffaireBigdeal($idPartenaire)
    {
        $sql = "select  ann ";
        //$from = " from Back\CommandeBundle\Entity\Command as cmd,";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";
        //$from .= "  Back\DealBundle\Entity\Deal as dea,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
       // $where = " where tic.command = cmd.id and";
       // $where = "  where cmd.deal =  dea.id   and ";
        //$where .= "  dea.planning =  plan.id   and ";
        $where = "  where plan.defaultannexe = ann.id   and ";
        $where .= "  ann.protocol = pro.id   and ";
        $where .= "  pro.user = " . $idPartenaire . "   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return $result;
    }

    public function totalReclamationsMarchant($idPartenaire)
    {
        $sql = "select tic ";
        $from = " from Back\CommandeBundle\Entity\Ticket as tic,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\DealBundle\Entity\Deal as dea,";

        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where tic.commande = cmd.id and ";
        $where .= "  cmd.deal =  dea.id   and ";
        $where .= "  dea.planning =  plan.id   and ";
        $where .= "  plan.defaultannexe = ann.id   and ";
        $where .= "  ann.protocol = pro.id   and ";
        $where .= "  pro.user = " . $idPartenaire . "   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        //echo $query; exit;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return count($result);

    }

    public function totalDeal($idPartenaire)
    {
        $sql = "select deal ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plann,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where deal.planning = plann.id and";
        $where .= "  plann.defaultannexe =  ann.id   and ";
        $where .= "  ann.protocol = pro.id   and ";
        $where .= "  pro.user = " . $idPartenaire . "   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return count($result);
    }

    public function getChiffreAffaire($idDeal)
    {
        $sql = "select SUM(ref.bigdealPrice) as ca ";
        $from = " from Back\ContractBundle\Entity\Reference as ref,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where cmd.id = coup.command and";
        $where .= "  cmd.reference =  ref.id   and ";
        $where .= "  coup.vendu in (2,3)   and ";
        $where .= "  cmd.deal = " . $idDeal . "   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        if (!$result[0]["ca"]) {
            $result[0]["ca"] = 0;
        } else
            return $result[0]["ca"];
    }

    public function getMontantGratuite($idDeal)
    {
        $sql = "select SUM(ref.bigdealPrice) as ca ";
        $from = " from Back\ContractBundle\Entity\Reference as ref,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where cmd.id = coup.command and";
        $where .= "  cmd.reference =  ref.id   and ";
        $where .= "  coup.vendu in (2,3)   and ";
        $where .= "  cmd.deal = " . $idDeal . "   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        if (!$result[0]["ca"]) {
            $result[0]["ca"] = 0;
        } else
            return $result[0]["ca"];
    }

}
