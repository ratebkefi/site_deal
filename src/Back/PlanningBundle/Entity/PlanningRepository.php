<?php

namespace Back\PlanningBundle\Entity;

use Back\CommandeBundle\Entity\Ticket;
use Doctrine\ORM\EntityRepository;

/**
 * PlanningRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanningRepository extends EntityRepository
{
    public function compareDatePublication($dated,$datef)
    {
        $sql = "select plan ";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";
        $where = "  where plan.state = 0 and";
        $where .= " plan.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

 


    public function getNombreDealParEtat($etatPlanning,$dated,$datef,$region)
    {

        $sql = "select plan ";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";
        $where = "  where plan.state = " . $etatPlanning . " and";
        $where .= " plan.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";
        $where .= " plan.regionId = " . $region . " and ";


        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);

        return count($qb->getResult());

        $sql = "select plan ";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";
        $where = "  where plan.state = " . $etatPlanning . " and";
        $where .= " plan.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";


        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);

        return count($qb->getResult());
    }

    public function getDealAnnuler()
    {
        $sql = "select plan ";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";
        $where = "  where plan.state = 4 and";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);

        return $qb->getResult();
    }
    public function contratSigne($idCommercial,$dated,$datef)
    {
        $sql = "select ann ";
        $from = " from Back\ContractBundle\Entity\Annexe as ann,";
        $where = "  where ann.agent = $idCommercial and";
        $where .= " ann.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);

        return $qb->getResult() ;
    }
    public function getAnnexeAccepterParCommercial($idCommercial,$dated,$datef)
    {
        $sql = "select plan ";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";
        $from .= " Back\ContractBundle\Entity\Annexe as ann,";
        $where = "  where plan.defaultannexe = ann.id and";
        $where .= "   ann.agent = $idCommercial and";
        $where .= " ann.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);

        return count($qb->getResult()) ;
    }

    public function getAnnexeAccepterParCommercialByName($idCommercial,$dated,$datef)
    {
        $sql = "select ann ";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";
        $from .= " Back\ContractBundle\Entity\Annexe as ann,";
        $where = "  where plan.defaultannexe = ann.id and";
        $where .= "   ann.agent = $idCommercial and";
        $where .= " ann.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return $result;

    }



    public function compareAnnexePlanning($dated,$datef)
    {
        $sql = "select plan ";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";
        $from .= " Back\ContractBundle\Entity\Annexe as ann,";
        $where = "  where plan.defaultannexe = ann.id and";
        $where .= " ann.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);

        return $qb->getResult();
    }

    public function getListDealParEtat($etat,$dated,$datef)
    {
        $sql = "select plan ";
        $from = " from Back\PlanningBundle\Entity\Planning as plan,";

        $where = " where plan.dcr BETWEEN  '" . $dated . "' AND  '" . $datef . "' and ";

        if ($etat != "")
            $where .= "   plan.state = $etat and";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);

        return $qb->getResult();
    }

    public function getNbrVolumePayement($dateD, $dateF, $deal, $mode)
    {
        $sql = "select ope ";
        $from = " from Back\CommandeBundle\Entity\Operation as ope,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $where = " where ope.modepayement=$mode and";

        $where .= "  ope.commande = cmd.id and";
        $where .= " coup.command=cmd.id and";
        $where .= "  ope.dcr BETWEEN  '$dateD 00:00:00' AND '$dateF 23:59:59'  and ";


        if ($deal != "") {
            $where .= "  cmd.deal = " . $deal . " and";
        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);

        return count($qb->getResult());

    }

    public function getNombreVirement($date)
    {

        //recuperer montant Virement
        $sql = "select vir.montant as somme";
        $from = " from Back\CommandeBundle\Entity\Virement as vir,";
        $from .= "  Back\CommandeBundle\Entity\Remboursement as rem,";
        $from .= "  Back\PlanningBundle\Entity\Planning as pla,";
        $from .= "  Back\CommandeBundle\Entity\Client as cli,";
        $from .= "Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $from .= " Back\DealBundle\Entity\Deal as del,";
        $where = " where vir.dcr = '" . $date . "' and ";
        $from .= "Back\ContractBundle\Entity\Reference as ref,";

        $where .= " rem.virement=vir.id and";
        $where .= " coup.command=cmd.id and";
        $where .= " rem.coupon=coup.id and";
        $where .= " cmd.client=cli.id and";
        $where .= " cmd.reference=ref.id and";
        $where .= " del.planning =pla.id and";
        $where .= " ref.annexe =ann.id and";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by vir.id";
        $qb = $this->getEntityManager()->createQuery($query);
        $sumVirement = 0;

        foreach ($qb->getResult() as $value) {
            $sumVirement += $value["somme"];
        }
        return $sumVirement;

    }

    public function getNombreinscrits($dateD,$dateF)
    {
        $sql = "select count(tic.id)   ";
        $from = " from Back\CommandeBundle\Entity\Client as tic,";
        $from = substr($from, 0, -1);
        $query = $sql . $from ;
        $qb = $this->getEntityManager()->createQuery($query);
        $total = $qb->getResult();
        return $total;
    }

    public function getNombreSans($dateD,$dateF)
    {
        $sql = "select tic   ";
        $from = " from Back\CommandeBundle\Entity\Ticket as tic,";
        $where = " where tic.dcr BETWEEN  '" . $dateD . "' AND  '" . $dateF . "'";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $total = count($qb->getResult());

        $sql = "select rem ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as rem,";
        $where = " where  rem.ticket >0 and ";
        $where .= " rem.dcr >  '" . $dateD . "' and";
        $where .= " rem.dcr <  '" . $dateF . "' group by rem.ticket";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $rem= count($qb->getResult());

        return $total-$rem;

    }


    public function getNombreRembVirement($dateD,$dateF)
    {
        //recuperer Montant BigFid
        $sql = "select rem ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as rem,";
        $where = " where  rem.virement > 0 and rem.virement in ( select vir.id from Back\CommandeBundle\Entity\Virement as vir where vir.etat=1 ) and ";
        $where .= " rem.dcr >  '" . $dateD . "' and";
        $where .= " rem.dcr <  '" . $dateF . "' group by rem.ticket";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return count($qb->getResult());

    }

    public function getNombreBigFid($dateD,$dateF)
    {
        //recuperer Montant BigFid
        $sql = "select rem ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as rem,";
        $where = " where  rem.historique > 0 and ";
        $where .= " rem.dcr >  '" . $dateD . "' and";
        $where .= " rem.dcr <  '" . $dateF . "' group by rem.ticket";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return count($qb->getResult());


    }





    public function getMontantBigFid($date, $partenaire, $categorie, $region, $deal)
    {
        //recuperer Montant BigFid
        $sql = "select hist.montant AS  sommebigfid ";
        $from = " from Back\DashBundle\Entity\BigFidHistorique as hist,";
        $from .= "  Back\PlanningBundle\Entity\Planning as pla,";
        $from .= "  Back\CommandeBundle\Entity\Client as cli,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= " Back\DealBundle\Entity\Deal as del,";
        $from .= "Back\ContractBundle\Entity\Reference as ref,";

        $where = " where hist.dcr LIKE '" . $date . "%' and ";
        $where .= " hist.client=cli.id and";
        $where .= " cmd.client=cli.id and";
        $where .= " cmd.reference=ref.id and";
        $where .= " del.planning =pla.id and";
        $where .= " ref.annexe =ann.id and";

        if ($partenaire != "") {
            // $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Protocol as pro,";
            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ann.protocol = pro.id and";
            $where .= "  pro.user = " . $partenaire . "  and";
        }
        if ($categorie != "") {
            $where .= "  pla.categoryId = " . $categorie . " and";
        }
        if ($region != "") {
            $where .= "  pla.regionId = " . $region . " and";
        }
        if ($deal != "") {
            $where .= "  del.id = " . $deal . " and";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by hist.id";

        $qb = $this->getEntityManager()->createQuery($query);

        $sommebigfid = 0;
        foreach ($qb->getResult() as $value) {
            $sommebigfid += $value["sommebigfid"];
        }
        return $sommebigfid / 20;

    }

    public function getMontantVirement($date, $partenaire, $categorie, $region, $deal)
    {

        //recuperer montant Virement
        $sql = "select vir.montant as somme";
        $from = " from Back\CommandeBundle\Entity\Virement as vir,";
        $from .= "  Back\CommandeBundle\Entity\Remboursement as rem,";
        $from .= "  Back\PlanningBundle\Entity\Planning as pla,";
        $from .= "  Back\CommandeBundle\Entity\Client as cli,";
        $from .= "Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $from .= " Back\DealBundle\Entity\Deal as del,";
        $where = " where vir.dcr = '" . $date . "' and ";
        $from .= "Back\ContractBundle\Entity\Reference as ref,";

        $where .= " rem.virement=vir.id and";
        $where .= " coup.command=cmd.id and";
        $where .= " rem.coupon=coup.id and";
        $where .= " cmd.client=cli.id and";
        $where .= " cmd.reference=ref.id and";
        $where .= " del.planning =pla.id and";
        $where .= " ref.annexe =ann.id and";
        if ($partenaire != "") {
            $from .= "Back\ContractBundle\Entity\Protocol as pro,";
            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ann.protocol = pro.id and";
            $where .= "  pro.user = " . $partenaire . "  and";
        }
        if ($categorie != "") {
            $where .= "  pla.categoryId = " . $categorie . " and";
        }
        if ($region != "") {
            $where .= "  pla.regionId = " . $region . " and";
        }
        if ($deal != "") {
            $where .= "  del.id = " . $deal . " and";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by vir.id";
        $qb = $this->getEntityManager()->createQuery($query);
        $sumVirement = 0;

        foreach ($qb->getResult() as $value) {
            $sumVirement += $value["somme"];
        }

        return $sumVirement;

    }

    public function getNomnreBigFid($date, $partenaire, $categorie, $region, $deal)
    {
        //recupererNombre BigFid
        $sql = "select hist ";
        $from = " from Back\DashBundle\Entity\BigFidHistorique as hist,";
        $from .= "  Back\PlanningBundle\Entity\Planning as pla,";
        $from .= "  Back\CommandeBundle\Entity\Client as cli,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "Back\ContractBundle\Entity\Annexe as ann,";
        $from .= " Back\DealBundle\Entity\Deal as del,";
        $from .= "Back\ContractBundle\Entity\Reference as ref,";

        $where = " where hist.dcr LIKE '" . $date . "%' and ";
        $where .= " hist.client=cli.id and";
        $where .= " cmd.client=cli.id and";
        $where .= " cmd.reference=ref.id and";
        $where .= " del.planning =pla.id and";
        $where .= " ref.annexe =ann.id and";

        if ($partenaire != "") {

            $from .= "Back\ContractBundle\Entity\Protocol as pro,";
            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ann.protocol = pro.id and";
            $where .= "  pro.user = " . $partenaire . "  and";
        }
        if ($categorie != "") {
            $where .= "  pla.categoryId = " . $categorie . " and";
        }
        if ($region != "") {
            $where .= "  pla.regionId = " . $region . " and";
        }
        if ($deal != "") {
            $where .= "  del.id = " . $deal . " and";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by hist.id";
        $qb = $this->getEntityManager()->createQuery($query);

//echo $qb->getSQL();exit;

        return count($qb->getResult());
    }

    public function getNomnreVirement($date, $partenaire, $categorie, $region, $deal)
    {

        //recupererNombre Virement
        $sql = "select vir ";
        $from = " from Back\CommandeBundle\Entity\Virement as vir,";
        $from .= "  Back\CommandeBundle\Entity\Remboursement as rem,";
        $from .= "  Back\PlanningBundle\Entity\Planning as pla,";
        $from .= "  Back\CommandeBundle\Entity\Client as cli,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= " Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $from .= " Back\DealBundle\Entity\Deal as del,";
        $where = " where vir.dcr = '" . $date . "' and ";
        $from .= "Back\ContractBundle\Entity\Reference as ref,";

        $where .= " rem.virement=vir.id and";
        $where .= " coup.command=cmd.id and";
        $where .= " rem.coupon=coup.id and";
        $where .= " cmd.client=cli.id and";
        $where .= " cmd.reference=ref.id and";
        $where .= " del.planning =pla.id and";
        $where .= " ref.annexe =ann.id and";
        if ($partenaire != "") {
            $from .= "Back\ContractBundle\Entity\Protocol as pro,";
            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ann.protocol = pro.id and";
            $where .= "  pro.user = " . $partenaire . "  and";
        }
        if ($categorie != "") {
            $where .= "  pla.categoryId = " . $categorie . " and";
        }
        if ($region != "") {
            $where .= "  pla.regionId = " . $region . " and";
        }
        if ($deal != "") {
            $where .= "  del.id = " . $deal . " and";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by vir.id";
        $qb = $this->getEntityManager()->createQuery($query);


        return count($qb->getResult());
    }

    public function findDeal2($idCategorie, $idregion, $prtenaireId)
    {
        $sql = "select pla ";
        $from = " from Back\PlanningBundle\Entity\Planning as pla,";
        $where = " where 1=1 and";

        if ($prtenaireId != "") {
            $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Protocol as pro,";
            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ann.protocol = pro.id and";
            $where .= "  pro.user = " . $prtenaireId . "  and";
        }
        if ($idCategorie != "") {
            $where .= "  pla.categoryId = " . $idCategorie . " and";
        }
        if ($idregion != "") {
            $where .= "  pla.regionId = " . $idregion . " and";
        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();

    }

    public function findDeal($dated, $datef, $prtenaireId)
    {

        $sql = "select pla ";
        $from = " from Back\PlanningBundle\Entity\Planning as pla,";
        $where = " where 1=1 and";
        //$where .= "  pla.endDate <='".$datef->format('Y-m-d')."' and";
        if ($prtenaireId != "") {
            $from .= "Back\ContractBundle\Entity\Annexe as ann,";
            $from .= "Back\ContractBundle\Entity\Protocol as pro,";
            $where .= "  pla.defaultannexe = ann.id and";
            $where .= "  ann.protocol = pro.id and";
            $where .= "  pro.user = " . $prtenaireId . "  and";
        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

    public function findforselectdash($dated, $datef, $idcategorie, $idregion, $planning = "")
    {
        $qb = $this->createQueryBuilder('p')
            ->Where("p.startDate <='" . $dated->format('Y-m-d') . "'");
        if ($datef != null) {
            $qb->andWhere("p.endDate >='" . $datef->format('Y-m-d') . "'");
        }


        if ($idcategorie != "") {
            $qb->andWhere("p.categoryId = " . $idcategorie);
        }
        if ($idregion != "") {
            $qb->andWhere("p.regionId = " . $idregion);
        }
        if ($planning != "") {
            $qb->andWhere("p.id = " . $planning);
        }
        $qb->andWhere("p.defaultannexe  is not null");

        //echo $qb->getQuery()->getSQL();exit;
        return $qb->getQuery()->getResult();
    }

    public function findforJson($dt, $idcategorie, $idregion)
    {
        $qb = $this->createQueryBuilder('p')
            ->Where("p.startDate <='" . $dt->format('Y-m-d') . "'")
            ->andWhere("p.endDate >='" . $dt->format('Y-m-d') . "'");

        if ($idcategorie != "") {
            $qb->andWhere("p.categoryId = " . $idcategorie);
        }
        if ($idregion != "") {
            $qb->andWhere("p.regionId = " . $idregion);
        }
        //echo $qb->getQuery()->getSQL();exit;
        return $qb->getQuery()->getResult();
    }

    public function getNoAnnex()
    {
        return $this->findBy(array('annexe' => null));


    }
    public function getListValid1($region,$date,$status)
    {
	$sql = "select plan  from
                            BackPlanningBundle:Region as region ,
                            Back\PlanningBundle\Entity\Planning as plan
                            where  region.id=plan.regionId
                            and (region.id = " . $region->getId() . ")
                            and plan.endDate >=  '" . $date->format('Y-m-01') . "'";
	if(isset($status))
	$sql .= " and plan.state = ".$status;
        $query = $this->getEntityManager()
            ->createQuery($sql);
        return $query->getResult();

    }
    public function getListValid2($region,$status)
    {
	$sql = "select plan  from
                            BackPlanningBundle:Region as region ,
                            Back\PlanningBundle\Entity\Planning as plan
                            where  region.id=plan.regionId
                            and (region.id = " . $region->getId() . ")

                            ";
	if(isset($status))
	$sql .= " and plan.state = ".$status;
        $query = $this->getEntityManager()
            ->createQuery($sql);
        return $query->getResult();

    }
    public function getListValid($region,$date)
    {

        $query = $this->getEntityManager()
            ->createQuery("select plan  from
                            BackPlanningBundle:Region as region ,
                            Back\PlanningBundle\Entity\Planning as plan
                            where  region.id=plan.regionId
                            and (region.id = " . $region->getId() . ")
                            and plan.startDate >=  '" . $date->format('Y-m-01') . "'
                            and plan.endDate <=  '" . $date->format('Y-m-t') . "'

                            ");

        return $query->getResult();

    }

    public function getNotnullDeal($user)
    {
        $sql = "select deal ";
        $from = " from Back\DealBundle\Entity\Deal as deal,";
        $where = " where ";
        $from .= "Back\PlanningBundle\Entity\Planning as plan ";
        $where .= " deal.planning=plan.id and plan.state=1 and  ";
        $where .= " deal.redacteur=" . $user->getId() . " or deal.redacteur is null  ";
        $query = $sql . $from . $where . " group by deal.id";
        $qb = $this->getEntityManager()->createQuery($query);

        return $qb->getResult();

    }
}
