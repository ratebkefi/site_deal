<?php

namespace Back\PartnerBundle\Entity;

use Back\DashBundle\Common\Tools;
use Doctrine\ORM\EntityRepository;

/**
 * InvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends EntityRepository
{

    public function listPartenaire()
    {
        $sql = "select users.id , users.name ";
        $from = " from User\UserBundle\Entity\User as users,";
        $where = " where (1=1) and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

    public function listVirement($idDeal)
    {
        $sql = "select users.id as idusers, users.name as name, inv.virement as virem ,inv.etat as etat";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $from .= " User\UserBundle\Entity\User as users,";
        $where = " where (1=1) and ";
        $where .= " inv.deal = " . $idDeal . " and ";
        $where .= " inv.user = users.id and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by users.id ";
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }

    public function NbrRemb($idDeal)
    {
        $sql = "select count(remb) as countt ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as remb,";
        $from .= " Back\CommandeBundle\Entity\Ticket as tick,";
        $from .= "Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where remb.ticket = tick.id and";
        $where .= " tick.commande = cmd.id and";
        $where .= " cmd.deal = " . $idDeal;
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return $result[0]['countt'];
    }

    public function NbrRembByRef($idDeal,$idRef)
    {
        $sql = "select count(remb) as countt ";
        $from = " from Back\CommandeBundle\Entity\Remboursement as remb,";
        $from .= " Back\CommandeBundle\Entity\Ticket as tick,";
        $from .= "Back\CommandeBundle\Entity\Command as cmd,";
        $where = " where remb.ticket = tick.id and";
        $where .= " tick.commande = cmd.id and";
        $where .= " cmd.reference =  '$idRef ' and ";
        $where .= " cmd.deal = " . $idDeal;
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return $result[0]['countt'];
    }

    public function NbrFactureEnAttente($idDeal)
    {
        $sql = "select inv ";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $where = " where (1=1) and";
        $where .= " inv.deal = " . $idDeal;
        $where .= " and inv.dvir IS NULL";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return count($qb->getResult());
    }
    public function NbrFacturePayee($idDeal)
    {
        $sql = "select inv ";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $where = " where (1=1) and ";
        $where .= " inv.deal = " . $idDeal;
        $where .= " and inv.dvir IS NOT NULL";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return count($qb->getResult());
    }

    public function MinIdFacture($idDeal)
    {
        $sql = "select min(inv.id) as minid ";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $where = " where (1=1) and ";
        $where .= " inv.deal = " . $idDeal;
        
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        return $result[0]['minid'];
    }

    public function listPrice($idDeal, $idUsers)
    {
        $sql = "select ref.bigdealPrice as price, inv.comFixe as comfixe ,inv.comVariable as comvariable";
        $from = " from Back\ContractBundle\Entity\Reference as ref,";
        $from .= " Back\PartnerBundle\Entity\Invoice as inv,";
        $from .= " Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "Back\PlanningBundle\Entity\Planning as pla,";
        $from .= "Back\DealBundle\Entity\Deal as deal,";
        $from .= " User\UserBundle\Entity\User as users,";
        $where = " where inv.deal = " . $idDeal;
        $where .= " and inv.user = users.id and ";
        $where .= " users.id = " . $idUsers;
        $where .= " and inv.deal = deal.id and";
        $where .= " deal.planning = pla.id and";
        $where .= " pla.id = ann.planning and";
        $where .= " ref.annexe = ann.id";
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();

    }

    public function getListInv($data)
    {
        $sql = "select inv ";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $where = " where (1=1) and";

        if (isset($data['etat'])) {
            $where .= " inv.etat =" . $data['etat'] . " and ";
        }

        if (isset($data['user'])) {
            $where .= " inv.user =" . $data['user'] . " and ";
        }

        if (isset($data['deal'])) {
            $where .= " inv.deal =" . $data['deal'] . " and ";


        }
        if (isset($data['entreprise'])) {
            $where .= " inv.entreprise =" . $data['entreprise'] . " and ";


        }
        if (isset($data['coupon'])) {
            $where .= " inv.id IN ( SELECT CO from Back\CommandeBundle\Entity\Coupon as CO WHERE CO.code =  " . $data['coupon'] . "  ) and ";


        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by inv.id ";
        $qb = $this->getEntityManager()->createQuery($query);
        //Tools::dump($data,true);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }

    public function getListInvPaye($dateD,$dateF)
    {
        $endDate = $dateF;
        $firstDate = $dateD;
        $sql = "select inv ";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $where = " where (1=1) and";
        $where .= " inv.etat = 2 and ";
        $where .= "  inv.dvir <='".$endDate."%' and ";
        $where .= "  inv.dvir >='".$firstDate."%' and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by inv.id ";
        $qb = $this->getEntityManager()->createQuery($query);
        //Tools::dump($data,true);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }

    public function getListCaisse($dateD,$dateF)
    {
        $endDate = $dateF;
        $firstDate = $dateD;
        $sql = "select ope ";
        $from = " from Back\CommandeBundle\Entity\Operation as ope,";
        $where = " where (1=1) and ";
        $where .= "  ope.commande > 0 and ";
        $where .= "  ope.caisse != 156 and ";
        $where .= "  ope.dcr <='".$endDate."%' and ";
        $where .= "  ope.dcr >='".$firstDate."%' and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //Tools::dump($data,true);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }
    public function getListCaisseBigFid($dateD,$dateF)
    {
        $endDate = $dateF;
        $firstDate = $dateD;
        $sql = "select ope ";
        $from = " from Back\CommandeBundle\Entity\Operation as ope,";
        $where = " where (1=1) and ";
        $where .= "  ope.commande > 0 and ";
        $where .= "  ope.caisse = 216 and ";
        $where .= "  ope.dcr <='".$endDate."%' and ";
        $where .= "  ope.dcr >='".$firstDate."%' and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //Tools::dump($data,true);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }

    public function getListInvAll($dateD,$dateF)
    {
        $endDate = $dateF;
        $firstDate = $dateD;
        $sql = "select inv ";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $where = " where (1=1) and";
        $where .= "  inv.dcr <='".$endDate."%' and ";
        $where .= "  inv.dcr >='".$firstDate."%' and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " group by inv.id ";
        $qb = $this->getEntityManager()->createQuery($query);
        //Tools::dump($data,true);
        //echo $qb->getSQL();exit;
        return $qb->getResult();
    }


    public function listDeals($user)
    {
        $sql = "select dea ";
        $from = " from Back\CommandeBundle\Entity\Command as com,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $from .= "  Back\DealBundle\Entity\Deal as dea,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where (1=1) and";
        $where .= " com.id  =  coup.command  and ";
        $where .= " com.deal  =  dea.id  and ";
        $where .= " dea.planning  =  plan.id  and ";
        $where .= " plan.defaultannexe  =  ann.id  and ";
        $where .= " ann.protocol  =  pro.id  and ";
        $where .= " pro.user  =  $user   and ";
        //$where .= " dea.id  =  " . $codeCoupon . "   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //Tools::dump($data,true);

        return $qb->getResult();
    }

    public function listDeal($user)
    {
        $sql = "select dea ";
        $from = " from Back\CommandeBundle\Entity\Command as com,";
        $from .= "  Back\CommandeBundle\Entity\Coupon as coup,";
        $from .= "  Back\DealBundle\Entity\Deal as dea,";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro,";
        $where = " where (1=1) and";
        $where .= " com.id  =  coup.command  and ";
        $where .= " com.deal  =  dea.id  and ";
        $where .= " dea.planning  =  plan.id  and ";
        $where .= " plan.defaultannexe  =  ann.id  and ";
        $where .= " ann.protocol  =  pro.id  and ";
        $where .= " ann.booking  =  1   and ";
        $where .= " pro.user  =  $user   and ";
        //$where .= " dea.id  =  " . $codeCoupon . "   and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;
        $qb = $this->getEntityManager()->createQuery($query);
        //Tools::dump($data,true);

        return $qb->getResult();
    }

    public function getDealByUser($user)
    {
        $query = $this->getEntityManager()
        ->createQuery("select deal  from
            Back\DealBundle\Entity\Deal as deal ,
            Back\PlanningBundle\Entity\Planning as plan,
            Back\ContractBundle\Entity\Annexe as annex ,
            Back\ContractBundle\Entity\Protocol as protocole,
            User\UserBundle\Entity\User as user
            where  deal.planning=plan.id
            and plan.state=3
            and plan.defaultannexe=annex.id
            and annex.protocol=protocole.id
            and protocole.user=user.id
            and user.id=" . $user . "
            order by deal.id DESC
            ");

        //echo $query->getSQL();exit;
        return $query->getResult();
    }

    public function ListeDate($deal)
    {
        $sql = "select DISTINCT DATE_FORMAT(book.booking, '%Y-%m-%d') as  booking ";
        $from = " from Main\BookingBundle\Entity\Booking  as book ";
        $where = " where book.deal = $deal and";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where;

        $qb = $this->getEntityManager()->createQuery($query);
        return $qb->getResult();
    }


    public function montantNonFacturee($idDeal)
    {
        $sql = "select SUM(ref.bigdealPrice) as montant ";
        $from = " from Back\CommandeBundle\Entity\Coupon as coup,";
        $from .= "  Back\CommandeBundle\Entity\Command as cmd,";
        $from .= "  Back\ContractBundle\Entity\Reference as ref,";
        $where = " WHERE coup.command = cmd.id and ";
        $where .= "  cmd.reference =  ref.id   and ";
        $where .= " cmd.deal = " . $idDeal . " and ";
        $where .= " coup.recu = 2 and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " ";
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        if (!$result[0]["montant"]) {
            $result[0]["montant"] = 0;
            return 0;
        } else
        return $result[0]["montant"];

    }



    public function montantFactureEtPaye($idDeal)
    {
        $sql = "select SUM(inv.virement) as montant ";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $where = " WHERE inv.deal = " . $idDeal . " and ";
        $where .= " inv.etat = 2 and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " ";
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        if (!$result[0]["montant"]) {
            $result[0]["montant"] = 0;
            return 0;
        } else
        return $result[0]["montant"];

    }

    public function montantFactureEnattente($idDeal)
    {
        $sql = "select SUM(inv.virement) as montant ";
        $from = " from Back\PartnerBundle\Entity\Invoice as inv,";
        $where = " WHERE inv.deal = " . $idDeal . " and ";
        $where .= " inv.etat = 1 and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where . " ";
        $qb = $this->getEntityManager()->createQuery($query);
        $result = $qb->getResult();
        if (!$result[0]["montant"]) {
            $result[0]["montant"] = 0;
            return 0;
        } else
        return $result[0]["montant"];

    }
}
