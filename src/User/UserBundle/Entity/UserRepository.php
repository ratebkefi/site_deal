<?php

namespace User\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
public function verifierPartenaire($email,$id)
    {
        $sql = "select us ";
        $from = " from User\UserBundle\Entity\User as us ";
        $where = " WHERE us.roles  LIKE  '%PARTENAIRE%' and";
        
        $where .= " us.email = '" . $email. "' and ";
        $where .= " us.id != '" . $id. "' and ";
      
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where ;
        $qb = $this->getEntityManager()->createQuery($query);
		//echo $qb->getQuery()->getSQL(); exit;
        return $qb->getResult();
    }

    public function getListMarchand($commercial)
    {
        $sql = "select ann ";
        $from = " from User\UserBundle\Entity\User as us ,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro ,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann ,";
        $where = " WHERE us.roles  LIKE  '%PARTENAIRE%' and";

        $where .= " pro.id = ann.protocol and ";
        $where .= " us.id = pro.user and ";
        if($commercial)
        {
            $where .= " pro.commercial = " . $commercial . " and ";

        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where ;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getQuery()->getSQL(); exit;
        return $qb->getResult();
    }


    public function getListMarchandByDate($commercial,$dateD,$dateF)
    {

        $sql = "select ann ";
        $from = " from User\UserBundle\Entity\User as us ,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro ,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann ,";
        $where = " WHERE us.roles  LIKE  '%PARTENAIRE%' and";
        $where .= " ann.dcr >  '" . $dateD . "' and";
        $where .= " ann.dcr <  '" . $dateF . "' and";
        $where .= " pro.id = ann.protocol and ";
        $where .= " us.id = pro.user and ";
        if($commercial)
        {
            $where .= " pro.commercial = " . $commercial . " and ";

        }

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where ;
        $qb = $this->getEntityManager()->createQuery($query);
        //echo $qb->getQuery()->getSQL(); exit;
        return $qb->getResult();
    }

 public function getPartenairefilter($query)
    {
        $sql = "select us ";
        $from = " from User\UserBundle\Entity\User as us ";
        $where = " WHERE us.roles  LIKE  '%PARTENAIRE%' and";
        if (isset($data['name'])) {
            $where .= " us.name LIKE '%" . $query. "%' and ";
        }
      
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where ;
        $qb = $this->getEntityManager()->createQuery($query);
		//echo $qb->getQuery()->getSQL(); exit;
        return $qb->getResult();
    }

    public function findByRole($role) {
        
        $qb=$this->createQueryBuilder('u')
            
            ->where('u.roles LIKE :roles')
            ->setParameter('roles', '%"' . $role . '"%');
        return $qb->getQuery()->getResult();
    }

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null){
        $qb = $this->getEntityManager()->createQueryBuilder();
        $expr = $this->getEntityManager()->getExpressionBuilder();
        if($this->getEntityName()!='region')
        {
            $qb->select( 'entity' )
                ->from( $this->getEntityName(), 'entity' );
        }


        foreach ( $criteria as $field => $value ) {
            if(is_array($value)){
                $str="";
                foreach($value as $val){
                    $str .= ' entity.' . $field. " LIKE '%".$val."%' or " ;
                }
                $str=substr($str,0,-3);
                $qb->andWhere(  $str );
            }else if(!is_numeric($value)){
                $qb->andWhere(  'entity.' . $field. " LIKE '%".$value."%'" );
            }else{
                if($field=="name" || $field=="email")
                    $field = "id";
                //echo $value;exit;
                $qb->andWhere( 'entity.' . $field ."=". $value  );
            }

        }

        if ( $orderBy ) {

            foreach ( $orderBy as $field => $order ) {

                $qb->addOrderBy( 'entity.' . $field, $order );
            }
        }

        if ( $limit )
            $qb->setMaxResults( $limit );

        if ( $offset )
            $qb->setFirstResult( $offset );
//echo $qb->getQuery()->getSQL(); exit;
        return $qb->getQuery()->getResult();

    }

    public function getListPartnerByDealValide1($dateD,$dateF)
    {



        $dateFin = explode("/", $dateF);
        $dateDebut = explode("/", $dateD);
        $endDate = $dateFin[2] . "-" . $dateFin[1] . "-" . $dateFin[0];
        $firstDate = $dateDebut[2] . "-" . $dateDebut[1] . "-" . $dateDebut[0];

        $sql = "select us ";
        $from = " from User\UserBundle\Entity\User as us , ";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan  ,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro ,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann ,";
        $where = " WHERE us.roles  LIKE  '%PARTENAIRE%' and";
        $where .= " plan.defaultannexe=ann.id and ";
        $where .= " ann.protocol=pro.id and ";

        $where .= " pro.id = ann.protocol and ";
        $where .= " us.id = pro.user and ";
        $where .= " ( (plan.endDate > '" . $endDate . "' and plan.startDate <  '" . $endDate . "' )";
        $where .= " or (plan.endDate > '" . $firstDate . "' and plan.startDate <  '" . $firstDate . "' ) ) and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where ;
        $qb = $this->getEntityManager()->createQuery($query);
//echo $qb->getQuery()->getSQL(); exit;
        return $qb->getResult();

    }

    public function getListPartnerByDealValide($dateD,$dateF)
    {


        $dateFin = explode("-", $dateF);
        $dateDebut = explode("-", $dateD);
        $endDate = $dateFin[2] . "-" . $dateFin[0] . "-" . $dateFin[1];
        $firstDate = $dateDebut[2] . "-" . $dateDebut[0] . "-" . $dateDebut[1];



        $sql = "select us ";
        $from = " from User\UserBundle\Entity\User as us , ";
        $from .= "  Back\PlanningBundle\Entity\Planning as plan  ,";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro ,";
        $from .= "  Back\ContractBundle\Entity\Annexe as ann ,";
        $where = " WHERE us.roles  LIKE  '%PARTENAIRE%' and";
        $where .= " plan.defaultannexe=ann.id and ";
        $where .= " ann.protocol=pro.id and ";

        $where .= " pro.id = ann.protocol and ";
        $where .= " us.id = pro.user and ";
        $where .= " ( (plan.endDate > '" . $endDate . "' and plan.startDate <  '" . $endDate . "' )";
        $where .= " or (plan.endDate > '" . $firstDate . "' and plan.startDate <  '" . $firstDate . "' ) ) and ";

        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where ;
        $qb = $this->getEntityManager()->createQuery($query);
//echo $qb->getQuery()->getSQL(); exit;
        return $qb->getResult();

    }

    public function getListDealByCommande($dateD,$dateF)
{
    $endDate = $dateF;
    $firstDate = $dateD;

    $sql = "select deal ";
    $from = "  from Back\PlanningBundle\Entity\Planning as plan  ,";
    $from .= "  Back\ContractBundle\Entity\Protocol as pro ,";
    $from .= "   Back\CommandeBundle\Entity\Command as cmd,";
    $from .= "   Back\DealBundle\Entity\Deal as deal ,";
    $from .= "  Back\ContractBundle\Entity\Annexe as ann ,";
    $where = " WHERE deal.planning=plan.id and ";
    $where .= " plan.defaultannexe=ann.id and ";
    $where .= " cmd.deal = deal.id and ";
    $where .= " ann.protocol=pro.id and ";
    $where .= " pro.id = ann.protocol and ";
    $where .= "  plan.startDate <='".$endDate."%' and ";
    $where .= "  plan.startDate >='".$firstDate."%' and ";
    $where .= "  cmd.etat = 1 and ";

    $where = substr($where, 0, -4);
    $from = substr($from, 0, -1);
    $query = $sql . $from . $where ;
    $qb = $this->getEntityManager()->createQuery($query);
//echo $qb->getQuery()->getSQL(); exit;
        return $qb->getResult();


}


    public function getListPartnerByCommande($dateD,$dateF)
    {
        $endDate = $dateF;
        $firstDate = $dateD;
        $sql = "select us ";
        $from = " from User\UserBundle\Entity\User as us , ";
        $from .= "  Back\ContractBundle\Entity\Protocol as pro ,";
        $where = " WHERE us.roles LIKE  '%PARTENAIRE%' and";
        $where .= "  pro.datep <='".$endDate."%' and ";
        $where .= "  pro.datep >='".$firstDate."%' and ";
        $where .= " us.id = pro.user and ";
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where ;
        $qb = $this->getEntityManager()->createQuery($query);
//echo $qb->getQuery()->getSQL(); exit;
        return $qb->getResult();


    }


    public function getListPartner($data)
    {

        $sql = "select us ";
        $from = " from User\UserBundle\Entity\User as us, Back\PlanningBundle\Entity\Region as region ";
        $where = " WHERE us.roles  LIKE  '%PARTENAIRE%' and";
        if (isset($data['name'])) {
            $where .= " us.id = '" . $data['name']. "' and ";
        }
        if (isset($data['email'])) {
            $where .= " us.id ='" . $data['email']  . "' and ";
        }
        if (isset($data['category']) ) {
            $from .= ",Back\PlanningBundle\Entity\Category as cat,";
            $where .= " us.category=cat.id and ";
            if (isset($data['category'])) {
                $where .= " cat.id  = " . $data['category'] . " and ";
            }
        }
        if (isset($data['sellingpoint'])) {
            $from .= ", Back\PartnerBundle\Entity\SellingPoint as sp ,";
            $where .= " us.id =sp.user and ";
            $where .= " sp.name LIKE '%" . $data['sellingpoint'] . "%' and ";

        }
        $where = substr($where, 0, -4);
        $from = substr($from, 0, -1);
        $query = $sql . $from . $where ;
        $qb = $this->getEntityManager()->createQuery($query);

//echo $qb->getSQL(); exit;
        return $qb->getResult();

    }

}
